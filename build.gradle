plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.travelbookingsystem'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
    mapstructVersion = '1.6.3'
    lombokMapstructBindingVersion = '0.2.0'
    hibernateProcessorVersion = '7.1.0.Final'
    snakeyamlVersion = '2.4'
    springCloudVersion = '2025.0.0'
    testcontainersKeycloakVersion = '3.9.0'
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation 'org.liquibase:liquibase-core'
    implementation "org.hibernate:hibernate-jpamodelgen:${hibernateProcessorVersion}"
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-rabbit'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation "com.github.dasniko:testcontainers-keycloak:${testcontainersKeycloakVersion}"
    implementation 'org.springframework.security:spring-security-test'
    implementation 'org.testcontainers:junit-jupiter'

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
//    we need this dependency to be sure that lombok runs first
//    order of the annotationProcessor matters
//    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
//    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'
    runtimeOnly 'org.springframework:spring-jdbc'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:r2dbc'
    testImplementation "org.yaml:snakeyaml:$snakeyamlVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver"
    testImplementation 'org.springframework.cloud:spring-cloud-stream-test-binder'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testCompileOnly 'org.projectlombok:lombok'

    testAnnotationProcessor 'org.projectlombok:lombok'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

def checkPropertiesNotEmpty = { String task, def props ->
    if (props.isEmpty()) {
        throw new GradleException("task failed: No -P parameters passed...")
    }
}

def checkProperty = { String task, String prop, def props ->
    if(!props.containsKey(prop) || !project.property(prop).toString()) {
        throw new GradleException("$task failed : $prop is not passed as a parameter...");
    }
}

tasks.named('bootBuildImage').configure {
    doFirst {
        checkPropertiesNotEmpty(name, project.gradle.startParameter.projectProperties)

        def props = project.gradle.startParameter.projectProperties
        checkProperty(name, 'version', props)

        if (project.findProperty("publishImage")?.toBoolean()) {
            ['registryUsername', 'registryToken', 'registryUrl'].each { prop ->
                checkProperty(name, prop, props)
            }
        }
    }

    builder = "docker.io/paketobuildpacks/builder-jammy-base"
    version = project.findProperty("version")
    imageName = "ghcr.io/vasimvahabov/flight-booking-service" + ":" + version
    publish = project.findProperty("publishImage")?.toBoolean() ?: false
    environment = [
            "BP_JVM_VERSION": JavaVersion.current().majorVersion
    ]
    verboseLogging = true

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }

}


tasks.named('test') {
	useJUnitPlatform()
}
